<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git指南</title>
      <link href="posts/2021/git-command.html"/>
      <url>posts/2021/git-command.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git-操作指南"><a href="#Git-操作指南" class="headerlink" title="Git 操作指南"></a>Git 操作指南</h1><blockquote><p>更多详细的操作请查看<a href="http://git-scm.com/docs">官方文档</a></p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://git-scm.com/download/win">windows版本</a></p><p><a href="https://git-scm.com/download/linux">Linux/Unix版本</a></p><p><a href="https://git-scm.com/download/mac">Mac OS版本</a></p><h2 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h2><h3 id="git-init-clone"><a href="#git-init-clone" class="headerlink" title="git init/clone"></a>git init/clone</h3><p><code>git init</code> 初始化仓库，<code>git clone</code>克隆仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用当前目录作为根目录初始化仓库</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将newrepo目录作为仓库根目录，若newrepo不存在会自动在当前目录下新建一个newrepo目录</span></span><br><span class="line">git init [newrepo]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载一个完整的项目</span></span><br><span class="line">git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure><h3 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h3><p>更改配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示当前配置</span></span><br><span class="line">git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑(全局)配置文件</span></span><br><span class="line">git config -e [--global]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出(全局)用户信息</span></span><br><span class="line">git config [--global] user.name</span><br><span class="line">git config [--global] user.email</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑(全局)用户信息</span></span><br><span class="line">git config [--global] user.name <span class="string">&quot;your-name&quot;</span></span><br><span class="line">git config [--global] user.email <span class="string">&quot;your-email&quot;</span></span><br></pre></td></tr></table></figure><p>如果添加了 <code>--global</code> 参数就是全局配置，如果想要在某个项目下使用其他的用户名或邮件， 去掉 <code>--global</code> 参数重新配置即可</p><h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h3><p>将工作区文件添加到暂存区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加一个文件到暂存区</span></span><br><span class="line">git add [file1]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加多个文件到暂存区</span></span><br><span class="line">git add [file1] [file2]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">git add [dir]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录下所有文件到暂存区</span></span><br><span class="line">git add .</span><br></pre></td></tr></table></figure><h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><p>将暂存区的文件添加到本地仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区文件到本地仓库</span></span><br><span class="line"><span class="comment"># message为代码提交的详细信息</span></span><br><span class="line">git commit -m <span class="string">&quot;message&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定文件到本地仓库</span></span><br><span class="line">git commit [file1] [file2] -m <span class="string">&quot;message&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line">git commit -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line">git commit -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line">git commit --amend -m <span class="string">&quot;message&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line">git commit --amend [file1] [file2]</span><br></pre></td></tr></table></figure><h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h3><p>将本地的仓库分支上传到远程仓库并合并</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令格式</span></span><br><span class="line"><span class="comment"># git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span></span><br><span class="line">git push origin main:main</span><br><span class="line"><span class="comment"># 如果本地分支名与远程分支名相同可以省略远程分支名</span></span><br><span class="line">git push origin main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line">git push origin --all</span><br></pre></td></tr></table></figure><p>如果本地版本和远程版本有差异，可以使用<code>--force</code> 强制推送</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --force origin main</span><br></pre></td></tr></table></figure><h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h3><p>下载远程代码并合并到本地版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令格式</span></span><br><span class="line"><span class="comment"># git pull &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span></span><br><span class="line">git pull origin main:main</span><br><span class="line"><span class="comment"># 如果与当前分支合并可以省略远程分支名</span></span><br><span class="line">git pull origin main</span><br></pre></td></tr></table></figure><h3 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加远程仓库地址</span></span><br><span class="line">git remote add origin address</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改远程仓库地址</span></span><br><span class="line">git remote set-url origin [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程仓库</span></span><br><span class="line">git remote rm [repository]</span><br></pre></td></tr></table></figure><h3 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看本地分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有分支包括本地和远程分支</span></span><br><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建分支，但仍停留在当前分支</span></span><br><span class="line">git branch [branch-name]  <span class="comment"># branch-name为要创建的分支名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建分支，并切换到该分支</span></span><br><span class="line">git checkout -b [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建分支，指定commit</span></span><br><span class="line">git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line">git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名分支</span></span><br><span class="line">git branch -m &lt;旧名称&gt; &lt;新名称&gt;</span><br><span class="line">git branch -m [old-branch-name] [new-branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑分支介绍</span></span><br><span class="line">git branch [branch-name] --edit-description</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到上一个分支</span></span><br><span class="line">git checkout -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并分支到当前分支</span></span><br><span class="line">git merge [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></span><br><span class="line">git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">git push origin --delete [branch-name]</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">git branch -dr [remote/branch]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="git-tag"><a href="#git-tag" class="headerlink" title="git  tag"></a>git  tag</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有标签</span></span><br><span class="line">git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建标签</span></span><br><span class="line">git tag [tag-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定标签信息</span></span><br><span class="line">git tag [tag-name] -m <span class="string">&quot;message&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在指定commit上新建一个标签</span></span><br><span class="line">git tag [tag-name] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看标签所修改的内容</span></span><br><span class="line">git show [tag-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送一个本地标签</span></span><br><span class="line">git push origin [tag-name]</span><br><span class="line"></span><br><span class="line"><span class="comment">#推送全部未推送过的本地标签</span></span><br><span class="line">git push origin --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地标签</span></span><br><span class="line">git tag -d [tag-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除一个远程标签</span></span><br><span class="line">git push origin :refs/tags/&lt;tagname&gt;  </span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">git push origin --delete tag &lt;tagname&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示自上次提交后有变更的文件</span></span><br><span class="line">git status</span><br><span class="line">git status -s <span class="comment"># 查看更详细的信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有提交记录</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示几条提交信息</span></span><br><span class="line">git <span class="built_in">log</span> -n [num]</span><br><span class="line">git <span class="built_in">log</span> -n 10    <span class="comment"># 显示10条提交信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定文件的提交记录</span></span><br><span class="line">git <span class="built_in">log</span> [file-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看最近两次详细的修改内容</span></span><br><span class="line">git <span class="built_in">log</span> -p -2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找指定用户</span></span><br><span class="line">git <span class="built_in">log</span> --author=[user-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line"> git blame [file-name]</span><br></pre></td></tr></table></figure><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><h3 id="生成SSH-Key"><a href="#生成SSH-Key" class="headerlink" title="生成SSH Key"></a>生成SSH Key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;your-email&quot;</span></span><br></pre></td></tr></table></figure><p>生成时会要求确认路径和输入密码</p><p>key默认会保存在 ~/.ssh/id_rsa.pub 里</p><h2 id="一些其他会用到的骚操作"><a href="#一些其他会用到的骚操作" class="headerlink" title="一些其他会用到的骚操作"></a>一些其他会用到的骚操作</h2><h3 id="撤销add"><a href="#撤销add" class="headerlink" title="撤销add"></a>撤销add</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 适用于已 add 但未 commit</span></span><br><span class="line">git status        <span class="comment"># 首先查看哪些文件已经add</span></span><br><span class="line">git reset file    <span class="comment"># 撤销 file</span></span><br></pre></td></tr></table></figure><h3 id="撤销commit"><a href="#撤销commit" class="headerlink" title="撤销commit"></a>撤销commit</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^     <span class="comment"># 返回到上个版本，既上一个commit</span></span><br><span class="line">git reset --hard HEAD~n    <span class="comment"># 返回到倒数第n版本</span></span><br></pre></td></tr></table></figure><p>还可以根据 commitId 返回到特定的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先获取 commitId</span></span><br><span class="line">git <span class="built_in">log</span>    <span class="comment"># commit后面一长串就是id， 按q退出log</span></span><br><span class="line">git reset --hard commitId  <span class="comment"># 返回到commitId这个版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果撤销错了，想取消这次操作</span></span><br><span class="line">git reflog    <span class="comment"># 查看操作记录</span></span><br><span class="line">git reset --hard commitId   <span class="comment"># 返回到想回到的commit </span></span><br></pre></td></tr></table></figure><h3 id="删除远程文件或文件夹"><a href="#删除远程文件或文件夹" class="headerlink" title="删除远程文件或文件夹"></a>删除远程文件或文件夹</h3><p>预览文件，检查文件是否存在(不会删除源文件)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm -r -n --cached file/fileName</span><br></pre></td></tr></table></figure><p>确定删除文件(不会删除本地的文件)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached file/fileName</span><br></pre></td></tr></table></figure><p>提交到本地并推送到远程服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;message&quot;</span>  <span class="comment"># message为代码提交的详细信息</span></span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Debian9/10开启自带的bbr加速</title>
      <link href="posts/2021/open-debian-bbr.html"/>
      <url>posts/2021/open-debian-bbr.html</url>
      
        <content type="html"><![CDATA[<p>修改系统变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.core.default_qdisc=fq&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.ipv4.tcp_congestion_control=bbr&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>保存生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p>执行检查是否生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.tcp_available_congestion_control = bbr cubic reno</span><br></pre></td></tr></table></figure><p>检测bbr是否已开启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep bbr</span><br></pre></td></tr></table></figure><p>有结果说明已经开启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcp_bbr                20480  1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Debian </tag>
            
            <tag> bbr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo的简单安装与配置</title>
      <link href="posts/2021/install-hexo.html"/>
      <url>posts/2021/install-hexo.html</url>
      
        <content type="html"><![CDATA[<h1 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h1><p><strong>安装git</strong><br>去<a href="https://git-scm.com/">官网</a>下载安装或者<a href="https://npm.taobao.org/mirrors/git-for-windows/">淘宝镜像</a>下载git安装包<br> <strong>安装node.js</strong><br>去<a href="https://nodejs.org/en/">node官网</a>下载安装或者<a href="https://npm.taobao.org/mirrors/node">淘宝镜像</a>下载安装</p><span id="more"></span><h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1><p>安装hexo的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h1 id="生成blog"><a href="#生成blog" class="headerlink" title="生成blog"></a>生成blog</h1><p>首先新建一个文件夹，位置名字随意，然后cd到这个文件夹下，输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>启动本地服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server  <span class="comment">#或者简写成hexo s</span></span><br></pre></td></tr></table></figure><p>打开浏览器输入<a href="http://localhost:4000/">http://localhost:4000/</a> 就可以本地访问博客</p><h1 id="部署到github-pages"><a href="#部署到github-pages" class="headerlink" title="部署到github pages"></a>部署到github pages</h1><h2 id="ssh配置"><a href="#ssh配置" class="headerlink" title="ssh配置"></a>ssh配置</h2><h3 id="生成ssh-key"><a href="#生成ssh-key" class="headerlink" title="生成ssh key"></a>生成ssh key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;your email&quot;</span></span><br></pre></td></tr></table></figure><p>换成自己的邮箱<br>开始会让你输入保存的位置，默认保存在C:\Users\username.ssh\下<br>然后会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入</p><h3 id="添加ssh-key到GitHub"><a href="#添加ssh-key到GitHub" class="headerlink" title="添加ssh key到GitHub"></a>添加ssh key到GitHub</h3><p>打开C:\Users\username.ssh\id_rsa.pub，此文件里面内容为刚才生成的密钥，准确的复制这个文件的内容，粘贴到<a href="https://github.com/settings/ssh">https://github.com/settings/ssh</a> 的new SSH key中<br>输入下面的命令查看是否配置成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>中间的提示输入yes，最后看到下面的内容说明配置成功<br>You’ve successfully authenticated, but GitHub does not provide shell access.</p><h3 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h3><p>进入blog目录下,编辑config.yml，找到Deployment，按照下面修改，your_username换成你的github用户名，注意冒号后面有一空格</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: git@github.com:your_username/your_username.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h2 id="提交到GitHub-pages"><a href="#提交到GitHub-pages" class="headerlink" title="提交到GitHub pages"></a>提交到GitHub pages</h2><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>生成静态文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate   <span class="comment">#或者简写成hexo g</span></span><br></pre></td></tr></table></figure><p>部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy   <span class="comment">#或者简写成hexo d</span></span><br></pre></td></tr></table></figure><p>若上面操作失败，则需要提前安装一个扩展</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>之后在浏览器输入 <a href="https://your_username.github.io/">https://your_username.github.io</a> 就可以看到你的博客了</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
