const e=JSON.parse('{"key":"v-3ba7d634","path":"/posts/intersection-observer.html","title":"IntersectionObserver","lang":"zh-CN","frontmatter":{"date":"2024-1-14","category":["JS"],"tag":["JS","Vue"],"star":true,"description":"IntersectionObserver IntersectionObserver 提供了一种异步监听目标元素是否出现在视口的方法，它可以用于判断元素是否可见，从而执行相应的操作。 基本用法 创建 IntersectionObserver 对象 要使用 IntersectionObserver，首先需要创建一个 IntersectionObserver 对象，然后使用该对象来监听目标元素。当目标元素出现在视口或者达到一定阈值时，会触发回调函数，从而执行相应的操作。 const observer = new IntersectionObserver(callback, options);","head":[["meta",{"property":"og:url","content":"https://blog.yuchen.tech/posts/intersection-observer.html"}],["meta",{"property":"og:site_name","content":"雨辰的博客"}],["meta",{"property":"og:title","content":"IntersectionObserver"}],["meta",{"property":"og:description","content":"IntersectionObserver IntersectionObserver 提供了一种异步监听目标元素是否出现在视口的方法，它可以用于判断元素是否可见，从而执行相应的操作。 基本用法 创建 IntersectionObserver 对象 要使用 IntersectionObserver，首先需要创建一个 IntersectionObserver 对象，然后使用该对象来监听目标元素。当目标元素出现在视口或者达到一定阈值时，会触发回调函数，从而执行相应的操作。 const observer = new IntersectionObserver(callback, options);"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-15T14:39:11.000Z"}],["meta",{"property":"article:author","content":"Yuchen"}],["meta",{"property":"article:tag","content":"JS"}],["meta",{"property":"article:tag","content":"Vue"}],["meta",{"property":"article:published_time","content":"2024-01-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-15T14:39:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"IntersectionObserver\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-14T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-15T14:39:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Yuchen\\",\\"url\\":\\"https://blog.yuchen.tech\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://blog.yuchen.tech/atom.xml","title":"雨辰的博客 Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://blog.yuchen.tech/feed.json","title":"雨辰的博客 JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://blog.yuchen.tech/rss.xml","title":"雨辰的博客 RSS Feed"}]]},"headers":[{"level":2,"title":"基本用法","slug":"基本用法","link":"#基本用法","children":[{"level":3,"title":"创建 IntersectionObserver 对象","slug":"创建-intersectionobserver-对象","link":"#创建-intersectionobserver-对象","children":[{"level":4,"title":"callback 回调函数","slug":"callback-回调函数","link":"#callback-回调函数","children":[]},{"level":4,"title":"options 选项","slug":"options-选项","link":"#options-选项","children":[]}]},{"level":3,"title":"监听目标元素","slug":"监听目标元素","link":"#监听目标元素","children":[]},{"level":3,"title":"停止监听","slug":"停止监听","link":"#停止监听","children":[]}]},{"level":2,"title":"图片懒加载指令","slug":"图片懒加载指令","link":"#图片懒加载指令","children":[]},{"level":2,"title":"无限滚动","slug":"无限滚动","link":"#无限滚动","children":[]},{"level":2,"title":"组件懒加载","slug":"组件懒加载","link":"#组件懒加载","children":[]},{"level":2,"title":"slideIn 效果指令","slug":"slidein-效果指令","link":"#slidein-效果指令","children":[]}],"git":{"createdTime":1705329551000,"updatedTime":1705329551000,"contributors":[{"name":"yuchen","email":"dev.chenyu@gmail.com","commits":1}]},"readingTime":{"minutes":4.47,"words":1340},"filePathRelative":"posts/intersection-observer.md","localizedDate":"2024年1月14日","excerpt":"<h1> IntersectionObserver</h1>\\n<p>IntersectionObserver 提供了一种异步监听目标元素是否出现在视口的方法，它可以用于判断元素是否可见，从而执行相应的操作。</p>\\n<h2> 基本用法</h2>\\n<h3> 创建 IntersectionObserver 对象</h3>\\n<p>要使用 IntersectionObserver，首先需要创建一个 IntersectionObserver 对象，然后使用该对象来监听目标元素。当目标元素出现在视口或者达到一定阈值时，会触发回调函数，从而执行相应的操作。</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> observer <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">IntersectionObserver</span><span class=\\"token punctuation\\">(</span>callback<span class=\\"token punctuation\\">,</span> options<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
